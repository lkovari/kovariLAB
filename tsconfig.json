{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "module": "es2020",
    "moduleResolution": "node",
    "experimentalDecorators": true,
    "importHelpers": true,
    "target": "es5",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "es2018",
      "dom"
    ],
    /* https://www.typescriptlang.org/docs/handbook/compiler-options.html" */
    //	Report an error when not all code paths in function return a value.
    "noImplicitReturns": true,
    // Report errors on unused locals.
    "noUnusedLocals": true,
    // When the noImplicitAny flag is true and the TypeScript compiler cannot infer the type, it still generates the JavaScript files
    // "noImplicitAny": true,
    // raise error on this expressions with an implied any type
    "noImplicitThis": true
    // can reports errors for fall-through cases in switch statement where the case clause is non-empty.
    // ,"noFallthroughCasesInSwitch": true
    // the null and undefined values are not in the domain of every type and are only assignable to themselves and any
    // https://christianliebel.com/2017/05/angular-typescript-writing-safer-code-with-strictnullchecks/
    // https://www.tsmean.com/articles/learn-typescript/strict-null-checks-best-practice/
    ,"strictNullChecks": true    
    // Report errors on unused parameters
    ,"noUnusedParameters": true
    // Rather than actually execute a build with the other input options and config files, show the final implied config file in the output.
    ,"showConfig": true
    // Enable stricter checking of the bind, call, and apply methods on functions.
    // , "strictBindCallApply": true
    // false raises compiler errors about unreachable code
    ,"allowUnreachableCode": false
    ,"allowUnusedLabels": false
  },
  "angularCompilerOptions": {
    // When true (recommended), reports an error for a supplied parameter whose injection type cannot be determined
    "strictInjectionParameters": true,
    //  prints extra information while compiling templates
    "trace": true
    // enable IVY next-generation compilation and rendering pipeline
    ,"enableIvy": true
    // When true, generate all possible files even if they are empty. Default is false. Used by the Bazel build rules to simplify how Bazel rules track file dependencies. Do not use this option outside of the Bazel rules.
    ,"allowEmptyCodegenFiles": true
    // Show diagnostic information.
    , "diagnostics": true,
    // When true, enables strict template type checking in Angular version 9. Strict mode is only available when using Ivy.
    "strictTemplates": true,
  }    
}
